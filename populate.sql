SET DEFINE OFF;
SET VERIFY OFF;
SET FEEDBACK ON;
SET ECHO OFF;

-- Drop tables in reverse dependency order to avoid foreign key conflicts
DROP TABLE Feedback CASCADE CONSTRAINTS;
DROP TABLE Session_Booking CASCADE CONSTRAINTS;
DROP TABLE Session_Slot CASCADE CONSTRAINTS;
DROP TABLE Application CASCADE CONSTRAINTS;
DROP TABLE Internship CASCADE CONSTRAINTS;
DROP TABLE Matchmaking CASCADE CONSTRAINTS;
DROP TABLE Mentor CASCADE CONSTRAINTS;
DROP TABLE Student_Interests CASCADE CONSTRAINTS;
DROP TABLE Student CASCADE CONSTRAINTS;
DROP TABLE Interests CASCADE CONSTRAINTS;

-- -----------------------------------------------
-- 1. Table: Interests
-- Stores all possible fields of expertise or interest
-- -----------------------------------------------
CREATE TABLE Interests (
    interest_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    interest_name VARCHAR2(100) UNIQUE NOT NULL,
    CONSTRAINT interests_pk PRIMARY KEY (interest_id)
);

-- Interests
INSERT INTO Interests (interest_name) VALUES ('AI/ML');
INSERT INTO Interests (interest_name) VALUES ('Web Development');
INSERT INTO Interests (interest_name) VALUES ('Cybersecurity');
INSERT INTO Interests (interest_name) VALUES ('Data Science');
INSERT INTO Interests (interest_name) VALUES ('Cloud Computing');
INSERT INTO Interests (interest_name) VALUES ('DevOps');
INSERT INTO Interests (interest_name) VALUES ('Mobile App Development');
INSERT INTO Interests (interest_name) VALUES ('Blockchain');
INSERT INTO Interests (interest_name) VALUES ('Internet of Things');
INSERT INTO Interests (interest_name) VALUES ('Augmented Reality');
INSERT INTO Interests (interest_name) VALUES ('Virtual Reality');
INSERT INTO Interests (interest_name) VALUES ('Game Development');
INSERT INTO Interests (interest_name) VALUES ('Big Data');
INSERT INTO Interests (interest_name) VALUES ('Robotics');
INSERT INTO Interests (interest_name) VALUES ('Quantum Computing');
INSERT INTO Interests (interest_name) VALUES ('UI/UX Design');
INSERT INTO Interests (interest_name) VALUES ('Network Administration');
INSERT INTO Interests (interest_name) VALUES ('Database Management');
INSERT INTO Interests (interest_name) VALUES ('Software Testing');

-- 2. Table: Student
-- Stores basic student information

CREATE TABLE Student (
student_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
student_name VARCHAR2(100) NOT NULL,
student_email VARCHAR2(100) UNIQUE NOT NULL,
student_college VARCHAR2(100),
CONSTRAINT student_pk PRIMARY KEY (student_id)
);

-- Sample students
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Aarav Mehta', 'aarav@student.com', 'IIT Delhi');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Sanya Verma', 'sanya@student.com', 'BITS Pilani');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Rohan Desai', 'rohan@student.com', 'IIT Bombay');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Priya Nair', 'priya@student.com', 'IIIT Hyderabad');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Kunal Kapoor', 'kunal@student.com', 'NIT Trichy');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Neha Sharma', 'neha@student.com', 'IIT Kanpur');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Varun Joshi', 'varun@student.com', 'IIT Madras');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Ananya Singh', 'ananya@student.com', 'IIT Roorkee');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Rahul Yadav', 'rahul@student.com', 'IIT Guwahati');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Tanya Batra', 'tanya@student.com', 'VIT Vellore');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Dev Patel', 'dev@student.com', 'MIT Manipal');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Ishita Roy', 'ishita@student.com', 'SRM University');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Yash Malhotra', 'yash@student.com', 'Amity University');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Sneha Iyer', 'sneha@student.com', 'Shiv Nadar University');
INSERT INTO Student (student_name, student_email, student_college) VALUES ('Manav Rao', 'manav@student.com', 'Delhi University');

-- -----------------------------------------------
-- 3. Table: Student_Interests
-- Many-to-many mapping between students and interests
-- -----------------------------------------------
CREATE TABLE Student_Interests (
    student_id NUMBER(10),
    interest_id NUMBER(10),
    CONSTRAINT student_interests_pk PRIMARY KEY (student_id, interest_id),
    CONSTRAINT student_interests_fk1 FOREIGN KEY (student_id) REFERENCES Student(student_id),
    CONSTRAINT student_interests_fk2 FOREIGN KEY (interest_id) REFERENCES Interests(interest_id)
);

-- Map students to interests
INSERT INTO Student_Interests VALUES (1, 1);
INSERT INTO Student_Interests VALUES (1, 4);
INSERT INTO Student_Interests VALUES (2, 2);
INSERT INTO Student_Interests VALUES (3, 1);
INSERT INTO Student_Interests VALUES (3, 6);
INSERT INTO Student_Interests VALUES (4, 4);
INSERT INTO Student_Interests VALUES (5, 7);
INSERT INTO Student_Interests VALUES (6, 8);
INSERT INTO Student_Interests VALUES (7, 1);
INSERT INTO Student_Interests VALUES (8, 13);
INSERT INTO Student_Interests VALUES (9, 2);
INSERT INTO Student_Interests VALUES (9, 7);
INSERT INTO Student_Interests VALUES (10, 6);
INSERT INTO Student_Interests VALUES (11, 1);
INSERT INTO Student_Interests VALUES (12, 4);
INSERT INTO Student_Interests VALUES (13, 13);
INSERT INTO Student_Interests VALUES (14, 6);
INSERT INTO Student_Interests VALUES (15, 8);

-- -----------------------------------------------
-- 4. Table: Mentor
-- Stores mentor info including their expertise
-- -----------------------------------------------
CREATE TABLE Mentor (
    mentor_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    mentor_name VARCHAR2(100) NOT NULL,             -- Updated column name
    mentor_email VARCHAR2(100) UNIQUE NOT NULL,     -- Updated column name
    expertise_id NUMBER(10) NOT NULL,
    CONSTRAINT mentor_pk PRIMARY KEY (mentor_id),
    CONSTRAINT mentor_fk FOREIGN KEY (expertise_id) REFERENCES Interests(interest_id)
);

-- Sample mentors
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Suresh Kumar', 'suresh@100xdev.org', 1);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Megha Rao', 'megha@tuf.org', 2);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Rajiv Menon', 'rajiv@learnerbro.org', 4);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Nikita Jain', 'nikita@freecodecamp.org', 6);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Aditya Bansal', 'aditya@nextwave.org', 7);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Ritika Shah', 'ritika@jspiders.org', 8);
INSERT INTO Mentor (mentor_name, mentor_email, expertise_id) VALUES ('Arun Prakash', 'arun@qspiders.org', 13);

-- -----------------------------------------------
--Internal Table
CREATE TABLE Matchmaking (
    matchmaking_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    student_id NUMBER(10) NOT NULL,
    mentor_id NUMBER(10) NOT NULL,
    interest_id NUMBER(10) NOT NULL,
    mentor_name VARCHAR2(100),
    interest_name VARCHAR2(100),
    CONSTRAINT matchmaking_pk PRIMARY KEY (matchmaking_id),
    CONSTRAINT matchmaking_fk1 FOREIGN KEY (student_id) REFERENCES Student(student_id),
    CONSTRAINT matchmaking_fk2 FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id),
    CONSTRAINT matchmaking_fk3 FOREIGN KEY (interest_id) REFERENCES Interests(interest_id)
);

-- -----------------------------------------------
-- 5. Table: Internship
-- Stores internship listings linked to a mentor
-- -----------------------------------------------
CREATE TABLE Internship (
    internship_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    org_name CLOB NOT NULL,
    title VARCHAR2(100) NOT NULL,
    capacity NUMBER(10) NOT NULL,
    description CLOB,
    deadline DATE,
    CONSTRAINT internship_pk PRIMARY KEY (internship_id)
);

-- Sample internships
INSERT INTO Internship (org_name, title, capacity, description, deadline) VALUES ('Sarvam.AI', 'AI Intern', 3, 'Work with AI/ML team', DATE '2025-07-15');
INSERT INTO Internship (org_name, title, capacity, description, deadline) VALUES ('AccternityUI', 'Frontend Intern', 2, 'Work on React/JS', DATE '2025-07-10');
INSERT INTO Internship (org_name, title, capacity, description, deadline) VALUES ('DigiCloud', 'Cloud Ops Intern', 2, 'Cloud DevOps training', DATE '2025-07-20');
INSERT INTO Internship (org_name, title, capacity, description, deadline) VALUES ('ZettaChain', 'Blockchain R&D', 2, 'Smart contracts and chains', DATE '2025-07-12');
INSERT INTO Internship (org_name, title, capacity, description, deadline) VALUES ('DatamineX', 'Big Data Intern', 3, 'Work with Hadoop/Spark', DATE '2025-07-22');

-- -----------------------------------------------
-- 6. Table: Application
-- Tracks internship applications by students
-- -----------------------------------------------
CREATE TABLE Application (
    application_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    student_id NUMBER(10) NOT NULL,
    internship_id NUMBER(10) NOT NULL,
    status VARCHAR2(20) NOT NULL,
    applied_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT application_pk PRIMARY KEY (application_id),
    CONSTRAINT application_fk1 FOREIGN KEY (student_id) REFERENCES Student(student_id),
    CONSTRAINT application_fk2 FOREIGN KEY (internship_id) REFERENCES Internship(internship_id),
    CONSTRAINT application_status_check CHECK (status IN ('Applied', 'Accepted', 'Rejected'))
);

-- Sample applications
INSERT INTO Application (student_id, internship_id, status) VALUES (1, 1, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (2, 2, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (3, 3, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (4, 1, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (5, 2, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (6, 4, 'Applied');
INSERT INTO Application (student_id, internship_id, status) VALUES (7, 1, 'Applied');

-- -----------------------------------------------
-- 7. Table: Session_Slot (Fixed column names)
-- Defines available session slots offered by mentors
-- -----------------------------------------------
CREATE TABLE Session_Slot (
    slot_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    mentor_id NUMBER(10) NOT NULL,
    slot_date DATE NOT NULL,  -- Changed from 'date' to avoid Oracle reserved word
    slot_time TIMESTAMP NOT NULL,  -- Changed from 'time' to avoid Oracle reserved word
    duration NUMBER(10) NOT NULL,  -- in minutes
    status VARCHAR2(20) NOT NULL,
    CONSTRAINT session_slot_pk PRIMARY KEY (slot_id),
    CONSTRAINT session_slot_fk FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id),
    CONSTRAINT session_slot_status_check CHECK (status IN ('Available', 'Booked', 'Completed', 'Cancelled'))
);

-- Sample slots
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (1, DATE '2025-06-10', TIMESTAMP '2025-06-10 10:00:00', 60, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (2, DATE '2025-06-11', TIMESTAMP '2025-06-11 11:00:00', 45, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (3, DATE '2025-06-12', TIMESTAMP '2025-06-12 14:00:00', 30, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (4, DATE '2025-06-13', TIMESTAMP '2025-06-13 15:30:00', 60, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (5, DATE '2025-06-14', TIMESTAMP '2025-06-14 16:00:00', 45, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (6, DATE '2025-06-15', TIMESTAMP '2025-06-15 09:30:00', 60, 'Available');
INSERT INTO Session_Slot (mentor_id, slot_date, slot_time, duration, status) VALUES (7, DATE '2025-06-16', TIMESTAMP '2025-06-16 13:00:00', 60, 'Available');

-- -----------------------------------------------
-- 8. Table: Session_Booking (Renamed from Session to avoid reserved word)
-- Links a student to a booked session slot
-- -----------------------------------------------
CREATE TABLE Session_Booking (
    booking_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    slot_id NUMBER(10) NOT NULL,
    student_id NUMBER(10) NOT NULL,
    mentor_id NUMBER(10) NOT NULL,
    booking_status VARCHAR2(20) NOT NULL,
    CONSTRAINT session_booking_pk PRIMARY KEY (booking_id),
    CONSTRAINT session_booking_fk1 FOREIGN KEY (slot_id) REFERENCES Session_Slot(slot_id),
    CONSTRAINT session_booking_fk2 FOREIGN KEY (student_id) REFERENCES Student(student_id),
    CONSTRAINT session_booking_fk3 FOREIGN KEY (mentor_id) REFERENCES Mentor(mentor_id),
    CONSTRAINT session_booking_status_check CHECK (booking_status IN ('Scheduled', 'Completed', 'Cancelled'))
);

-- -----------------------------------------------
-- 9. Table: Feedback
-- Stores student feedback after a session
-- -----------------------------------------------
CREATE TABLE Feedback (
    feedback_id NUMBER GENERATED BY DEFAULT AS IDENTITY,
    booking_id NUMBER(10) NOT NULL,
    student_id NUMBER(10),
    rating NUMBER(10) NOT NULL,
    comments CLOB,
    CONSTRAINT feedback_pk PRIMARY KEY (feedback_id),
    CONSTRAINT feedback_fk1 FOREIGN KEY (booking_id) REFERENCES Session_Booking(booking_id),
    CONSTRAINT feedback_fk2 FOREIGN KEY (student_id) REFERENCES Student(student_id),
    CONSTRAINT feedback_rating_check CHECK (rating BETWEEN 1 AND 5)
);

SET DEFINE ON;
COMMIT;
